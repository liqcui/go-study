IF_ENABLE_AUDIT_EXISTING_NS=${IF_ENABLE_AUDIT_EXISTING_NS:=false}
NS_UUID=${NS_UUID:=""}
if [[ $IF_ENABLE_AUDIT_EXISTING_NS=="true" && -n $NS_UUID ]];then
     for nsName in `oc get ns | grep $NS_UUID| awk '{print $1}'`
     do
     oc annotate namespace $nsName k8s.ovn.org/acl-logging='{ "deny": "alert", "allow": "notice" }'
     done
else
     cus_ns=`oc get ns|grep "verify-audit-logging"|awk '{print $1}'`
     if [[ -n $cus_ns ]]; then echo "Namspace verify-audit-logging already present";
     else echo "Create a namespace for verification"
cat <<EOF| oc create -f -
kind: Namespace
apiVersion: v1
metadata:
  name: verify-audit-logging
  annotations:
    k8s.ovn.org/acl-logging: '{ "deny": "alert", "allow": "alert" }'
EOF

     echo "Create network policies for the namespace"
cat <<EOF| oc create -n verify-audit-logging -f -
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: deny-all
spec:
  podSelector:
    matchLabels:
  policyTypes:
  - Ingress
  - Egress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-from-same-namespace
  namespace: verify-audit-logging
spec:
  podSelector: {}
  policyTypes:
   - Ingress
   - Egress
  ingress:
    - from:
        - podSelector: {}
  egress:
    - to:
       - namespaceSelector:
          matchLabels:
            kubernetes.io/metadata.name: verify-audit-logging
EOF
    echo "Create a pod for source traffic in the default namespace"
    for name in client{1..50} server; do
    cat <<EOF| oc create -n default -f -
    apiVersion: v1
    kind: Pod
    metadata:
      name: ${name}
    spec:
      containers:
        - name: ${name}
          image: registry.access.redhat.com/rhel7/rhel-tools
          command: ["/bin/sh", "-c"]
          args:
            ["sleep inf"]
    EOF
    done
    
    echo "Create two pods in the verify-audit-logging namespace"
    for name in client{1..50} server; do
    cat <<EOF| oc create -n verify-audit-logging -f -
    apiVersion: v1
    kind: Pod
    metadata:
      name: ${name}
    spec:
      securityContext:
        seccompProfile:
          type: RuntimeDefault
    
      containers:
        - name: ${name}                                     
          image: registry.access.redhat.com/rhel7/rhel-tools
          command: ["/bin/sh", "-c"]
          args:
            ["sleep inf"]
    EOF
    done;
    fi
    echo "Obtain the IP address for pod named server in the verify-audit-logging namespace"
    
    POD_IP=$(oc get pods server -n verify-audit-logging -o jsonpath='{.status.podIP}')
    sleep 10
    echo $POD_IP
    echo "**************************************************************************************************************************************************************************************************************************Ping the IP address from the previous command from the pod named client in the default namespace and confirm that all packets are dropped:"
    
    if [[ -n $POD_IP ]];then 
    for i in {1..50};
    do
          echo "client$i pod to server pod in default namespace";
          oc exec -it client$i -n default -- /bin/ping -c 2 $POD_IP;
          sleep 2;
    done;
    
     echo "Ping the IP address saved in the POD_IP shell environment variable from the pod named client in the verify-audit-logging namespace and confirm that all packets are allowed:";
     for i in {1..50};
     do
         echo "client$i pod to server pod in custom namespace";
         oc exec -it client$i -n verify-audit-logging -- /bin/ping -c 2 $POD_IP;
         sleep 2;
     done;
         echo "Display the latest entries in the network policy audit log:";
     for pod in $(oc get pods -n openshift-ovn-kubernetes -l app=ovnkube-node --no-headers=true | awk '{ print $1 }') ; do
        oc exec -it $pod -n openshift-ovn-kubernetes -- tail -4 /var/log/ovn/acl-audit-log.log;
     done;
        else echo "IP address for pod named server in the verify-audit-logging namespace not obtained";
    fi
fi